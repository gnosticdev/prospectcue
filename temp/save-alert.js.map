{
  "version": 3,
  "sources": ["../src/typescript/dialog.ts", "../src/typescript/append.ts", "../src/typescript/constants.ts", "../src/typescript/tag-alert.ts", "../src/typescript/contact-divs.ts", "../src/typescript/index.ts", "../src/typescript/utils.ts", "../src/typescript/wait-elements.ts", "../src/typescript/save-alert.ts"],
  "sourcesContent": ["// @ts-nocheck\n\n/**\n * Dialog module.\n * @module dialog.js\n * @version 1.0.0\n * @summary 02-01-2022\n * @author Mads Stoumann\n * @description Custom versions of `alert`, `confirm` and `prompt`, using `<dialog>`\n */\nexport default class Dialog {\n    settings: DialogSettings;\n    dialogSupported?: boolean;\n    dialog?: HTMLDialogElement;\n    elements?: { [key: string]: HTMLElement };\n    focusable?: never[];\n    hasFormData?: boolean;\n\n    constructor(settings: DialogSettings) {\n        this.settings = {\n            accept: settings.accept || 'OK',\n            bodyClass: settings.bodyClass || 'dialog-open',\n            cancel: settings.cancel || 'Cancel',\n            ...settings,\n        };\n        this.init();\n    }\n\n    collectFormData(formData: FormData) {\n        const object: FormDataObject = {};\n        formData.forEach((value, key) => {\n            if (typeof value === 'string') {\n                if (object.hasOwnProperty(key)) {\n                    if (!Array.isArray(object[key])) {\n                        object[key] = [object[key] as string];\n                    }\n                    (object[key] as string[]).push(value);\n                } else {\n                    object[key] = value;\n                }\n            }\n        });\n        return object;\n    }\n\n    getFocusable() {\n        return [\n            ...this.dialog?.querySelectorAll(\n                'button,[href],select,textarea,input:not([type=\"hidden\"]),[tabindex]:not([tabindex=\"-1\"])'\n            ),\n        ];\n    }\n\n    init() {\n        this.dialogSupported = typeof HTMLDialogElement === 'function';\n        this.dialog = document.createElement('dialog');\n        this.dialog.role = 'dialog';\n        this.dialog.dataset.component = this.dialogSupported\n            ? 'dialog'\n            : 'no-dialog';\n        this.dialog.innerHTML = `\n    <form method=\"dialog\" data-ref=\"form\">\n      <fieldset data-ref=\"fieldset\" role=\"document\">\n        <legend data-ref=\"message\" id=\"${Math.round(Date.now()).toString(\n            36\n        )}\"></legend>\n        <div data-ref=\"template\"></div>\n      </fieldset>\n      <menu>\n        <button${\n            this.dialogSupported ? '' : ` type=\"button\"`\n        } data-ref=\"cancel\" value=\"cancel\"></button>\n        <button${\n            this.dialogSupported ? '' : ` type=\"button\"`\n        } data-ref=\"accept\" value=\"default\"></button>\n      </menu>\n      <audio data-ref=\"soundAccept\"></audio>\n      <audio data-ref=\"soundOpen\"></audio>\n    </form>`;\n        document.body.appendChild(this.dialog);\n\n        this.elements = {};\n        this.focusable = [];\n        this.dialog\n            .querySelectorAll('[data-ref]')\n            .forEach((el: HTMLElement) => (this.elements[el.dataset.ref] = el));\n        this.dialog.setAttribute('aria-labelledby', this.elements.message.id);\n        this.elements.cancel.addEventListener('click', () => {\n            this.dialog.dispatchEvent(new Event('cancel'));\n        });\n        this.dialog.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter') {\n                if (!this.dialogSupported) e.preventDefault();\n                this.elements.accept.dispatchEvent(new Event('click'));\n            }\n            if (e.key === 'Escape')\n                this.dialog.dispatchEvent(new Event('cancel'));\n            if (e.key === 'Tab') {\n                e.preventDefault();\n                const len = this.focusable.length - 1;\n                let index = this.focusable.indexOf(e.target);\n                index = e.shiftKey ? index - 1 : index + 1;\n                if (index < 0) index = len;\n                if (index > len) index = 0;\n                this.focusable[index].focus();\n            }\n        });\n        this.toggle();\n    }\n\n    open(settings: DialogSettings) {\n        const dialog = { ...this.settings, ...settings };\n        this.dialog.className = dialog.dialogClass || '';\n        this.elements.accept.innerText = dialog.accept;\n        this.elements.cancel.innerText = dialog.cancel;\n        this.elements.cancel.hidden = dialog.cancel === '';\n        this.elements.message.innerHTML = dialog.message;\n        this.elements.soundAccept.src = dialog.soundAccept || '';\n        this.elements.soundOpen.src = dialog.soundOpen || '';\n        this.elements.target = dialog.target || '';\n        this.elements.template.innerHTML = dialog.template || '';\n\n        this.focusable = this.getFocusable();\n        this.hasFormData = this.elements.fieldset.elements.length > 0;\n\n        if (dialog.soundOpen) {\n            this.elements.soundOpen.play();\n        }\n\n        this.toggle(true);\n\n        if (this.hasFormData) {\n            this.focusable[0].focus();\n            this.focusable[0].select();\n        } else {\n            this.elements.accept.focus();\n        }\n    }\n\n    toggle(open = false) {\n        if (this.dialogSupported && open) this.dialog.showModal();\n        if (!this.dialogSupported) {\n            document.body.classList.toggle(this.settings.bodyClass, open);\n        }\n        this.dialog.hidden = !open;\n        if (this.elements.target && !open) {\n            this.elements.target.focus();\n        }\n    }\n\n    waitForUser() {\n        return new Promise(\n            (resolve: (value: boolean | FormDataObject) => void) => {\n                this.dialog.addEventListener(\n                    'cancel',\n                    () => {\n                        this.toggle();\n                        resolve(false);\n                    },\n                    { once: true }\n                );\n                this.elements.accept.addEventListener(\n                    'click',\n                    () => {\n                        let value = this.hasFormData\n                            ? this.collectFormData(\n                                  new FormData(this.elements.form)\n                              )\n                            : true;\n                        if (\n                            this.elements.soundAccept.getAttribute('src')\n                                .length > 0\n                        )\n                            this.elements.soundAccept.play();\n                        this.toggle();\n                        resolve(value);\n                    },\n                    { once: true }\n                );\n            }\n        );\n    }\n\n    alert(message: string) {\n        const settings: Pick<\n            DialogSettings,\n            'target' | 'message' | 'cancel' | 'template'\n        > = {\n            target: config.target,\n            cancel,\n            message,\n            template,\n        };\n\n        this.open(settings);\n        return this.waitForUser();\n    }\n\n    confirm(message: string) {\n        const settings: Pick<\n            DialogSettings,\n            'target' | 'message' | 'template'\n        > = {\n            target: config.target,\n            message,\n            template,\n        };\n        this.open(settings);\n        return this.waitForUser();\n    }\n\n    prompt(message: string, value: boolean | FormData) {\n        const template = `<label aria-label=\"${message}\"><input type=\"text\" name=\"prompt\" value=\"${value}\"></label>`;\n        const settings: Pick<\n            DialogSettings,\n            'target' | 'message' | 'template'\n        > = {\n            target: config.target,\n            message,\n            template,\n        };\n        this.open(settings);\n        return this.waitForUser();\n    }\n}\n", "import { appended } from './index';\nimport { getAddressDivs, colorConsole } from './utils';\nimport { waitForElement, waitForManyElements } from './wait-elements';\n\nexport async function addAddressButtons() {\n    // Check if map buttons already present\n    const labels = await waitForManyElements(\n        '.hl_contact-details-left .form-group .label',\n        20\n    );\n    const addressDivs = getAddressDivs(labels);\n    if (!addressDivs) {\n        colorConsole(\n            'no address divs found, returning from startAddButtons',\n            'red'\n        );\n        return;\n    }\n    colorConsole('address divs found... inserting map buttons', 'green');\n    await insertMapButtons(addressDivs);\n}\n\n/**\n * Inserts the map buttons\n * @param {{streetLabel: HTMLElement, streetDiv: HTMLElement, cityDiv: HTMLElement, stateDiv: HTMLElement, zipDiv: HTMLElement}} addressDivs\n */\nexport async function insertMapButtons(addressDivs: AddressDivs) {\n    // const prospectTab = $('#prospect > div:nth-child(2)');\n    if (document.querySelectorAll('.zg-map-btns').length > 0) {\n        colorConsole('map buttons already present, returning', 'yellow');\n        return;\n    }\n    const newDiv = document.createElement('div');\n    newDiv.id = 'mapLinks';\n    newDiv.className = 'mapContainerZG';\n    newDiv.style.display = 'inline-flex';\n    const { streetLabel } = addressDivs;\n    streetLabel.style.display = 'inline-flex';\n    streetLabel.style.width = '50%';\n\n    const addressParams: { [key: string]: string | null } = {\n        street: addressDivs.streetDiv.querySelector('input')?.value ?? null,\n        city: addressDivs.cityDiv.querySelector('input')?.value ?? null,\n        state: addressDivs.stateDiv.querySelector('input')?.value ?? null,\n        zip: addressDivs.stateDiv.querySelector('input')?.value ?? null,\n    };\n\n    // create string of address params separatted by a '-', also for each value if it has a space, only add if not null\n    const zillowParams = encodeURIComponent(\n        Object.values(addressParams)\n            .filter((val) => val !== null)\n            .join(' ')\n    );\n\n    const googleParams = Object.values(addressParams)\n        .filter((val) => val !== null)\n        .map((val) => encodeURIComponent(val as string))\n        .join('+');\n\n    const googleButton = `<span class=\"zillowTitle\">Search:</span><a href=\"https://www.google.com/search?q=${googleParams}\" target=\"_blank\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\" class=\"zg-map-btns\"></a>`;\n    const zillowButton = `<a href=\"https://www.zillow.com/homes/for_sale/${zillowParams}_rb\" target=\"_blank\" id=\"zillowLink\"><img src=\"https://www.zillow.com/apple-touch-icon.png\" class=\"zg-map-btns\"></a>`;\n    newDiv.innerHTML = googleButton + zillowButton;\n\n    streetLabel.insertAdjacentElement('afterend', newDiv);\n}\n\nexport async function addSectionToggle() {\n    if (document.getElementById('section-toggle')) {\n        colorConsole('section toggle already present, returning', 'yellow');\n        return;\n    }\n    const checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n    checkbox.id = 'section-toggle';\n    checkbox.className =\n        'focus:ring-curious-blue-500 h-5 w-5 text-curious-blue-600 border-gray-300 rounded mr-2 disabled:opacity-50';\n    const label = document.createElement('label');\n    label.htmlFor = 'section-toggle';\n    label.innerText = 'Toggle Sections';\n    label.style.color = 'var(--gray-600)';\n    label.className = 'mb-0 mr-4';\n\n    checkbox.addEventListener('change', toggleSections);\n\n    const toggleDiv = document.createElement('div');\n    toggleDiv.appendChild(checkbox);\n    toggleDiv.appendChild(label);\n    toggleDiv.style.display = 'inline-flex';\n    const { firstElementChild: parentNode } = await waitForElement({\n        selector: '.hl_contact-details-left .h-full.overflow-y-auto',\n    });\n    if (!parentNode) {\n        colorConsole('parent node not found', 'red');\n        return;\n    }\n    parentNode.className += ' text-xs !text-gray-600';\n    parentNode.insertBefore(toggleDiv, parentNode.firstChild);\n    // make other checkbox same style\n    (parentNode.lastElementChild as HTMLDivElement).style.color =\n        'var(--gray-600)';\n}\n\nexport function toggleSections(e: Event) {\n    const checkbox = e.target as HTMLInputElement;\n    if (checkbox.checked) {\n        for (let trigger of appended.contactDivTriggers) {\n            if (trigger.parentElement?.getAttribute('data-open') === 'true') {\n                trigger.click();\n            }\n        }\n    } else {\n        // open all sections when unchecked\n        for (let trigger of appended.contactDivTriggers) {\n            if (trigger.parentElement?.getAttribute('data-open') === 'false') {\n                trigger.click();\n            }\n        }\n    }\n}\n", "export const CONTACT_DIVS_SELECTOR =\n    '.hl_contact-details-left > div > .h-full.overflow-y-auto > .py-3.px-3';\nexport const ACTIONS_DIVS_SELECTOR =\n    '.hl_contact-details-left > div > .h-full.overflow-y-auto > .bg-gray-100 > .py-3.px-3';\nexport const CONTACT_SECTION_LABELS_SELECTOR =\n    '.hl_contact-details-left .form-group .label';\n", "import { ACTIONS_DIVS_SELECTOR } from './constants';\nimport Dialog from './dialog';\nimport { appended } from './index';\nimport { colorConsole } from './utils';\nimport { waitForElement, waitForManyElements } from './wait-elements';\n\nexport async function addTagElements() {\n    colorConsole(`inserting tag link and tag alert...`, 'blue');\n\n    appended.tagsAdded = [];\n    // If the edit tag div is already present, don't add it again\n    if (document.getElementById('tags-edit-container')) {\n        colorConsole('tags edit div already present', 'red');\n        return;\n    }\n\n    const actionsSection = (await waitForManyElements(\n        ACTIONS_DIVS_SELECTOR,\n        3\n    )) as NodeListOf<HTMLElement>;\n    // Tags section is the first child of the actions container with a heading of \"Tags\"\n    let tagsSection: HTMLDivElement | null = null;\n    for (let i = 0; i < actionsSection.length; i++) {\n        const node = actionsSection[i];\n        const heading = node.querySelector('span.text-sm.font-medium');\n        if (heading?.textContent && heading.textContent.trim() === 'Tags') {\n            tagsSection = node.firstElementChild as HTMLDivElement;\n            colorConsole(`Tags heading found-> `, 'orange', tagsSection);\n            break;\n        }\n    }\n\n    if (tagsSection === null) {\n        colorConsole('tags section not found', 'red');\n        return;\n    }\n\n    const newTagDiv = await appendTagLink(tagsSection);\n    if (!newTagDiv) {\n        colorConsole('new tag div not found', 'red');\n        return;\n    }\n    colorConsole(`new tag div found -> `, 'green', newTagDiv);\n    checkAddNewTag(newTagDiv);\n}\n\n/**\n * Inserts an \"Edit Tags\" link next to Tags section in Contact Details.\n * @param {HTMLDivElement} tagsSection - the Tags section on contact info screen\n */\nexport async function appendTagLink(tagsSection: HTMLDivElement) {\n    // If the edit tag div is already present, don't add it again\n    if (document.getElementById('tags-edit')) return undefined;\n\n    // neeed to insert the edit tags link just before the last child of the tags section\n    const lastChild = tagsSection.lastElementChild;\n\n    // Need container to hold the link so the link doesnt grow with flex-grow\n    const tagContainer = document.createElement('div');\n    tagContainer.id = 'tags-edit-container';\n\n    const tagLink = document.createElement('a');\n    // stop the link from propogating up the DOM\n    tagLink.addEventListener('click', (e) => e.stopPropagation());\n    tagLink.href = window.location.href.replace(/contacts.*/, 'settings/tags');\n    tagLink.target = '_blank';\n    tagLink.innerHTML = `<span id=\"tags-edit\" class=\"tags-edit\">Edit Tags  <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n  width=\"12\" height=\"12\"\n  viewBox=\"0 0 172 172\"\n  style=\" fill:#000000;\"><g transform=\"\"><g fill=\"none\" fill-rule=\"nonzero\" stroke=\"none\" stroke-width=\"1\" stroke-linecap=\"butt\" stroke-linejoin=\"miter\" stroke-miterlimit=\"10\" stroke-dasharray=\"\" stroke-dashoffset=\"0\" font-family=\"none\" font-weight=\"none\" font-size=\"none\" text-anchor=\"none\" style=\"mix-blend-mode: normal\"><path d=\"M0,172v-172h172v172z\" fill=\"none\"></path><path d=\"\" fill=\"none\"></path><path d=\"\" fill=\"none\"></path><path d=\"\" fill=\"none\"></path><path d=\"\" fill=\"none\"></path><path d=\"\" fill=\"none\"></path><path d=\"\" fill=\"none\"></path><g><path d=\"M5.375,26.875h118.25v118.25h-118.25z\" fill=\"#c2e8ff\"></path><path d=\"M118.25,32.25v107.5h-107.5v-107.5h107.5M129,21.5h-129v129h129v-129z\" fill=\"#357ded\"></path><path d=\"M129,43v32.25h-21.5l0,-32.25z\" fill=\"#c2e8ff\"></path><path d=\"M118.25,21.5v21.5h-32.25v-21.5z\" fill=\"#c2e8ff\"></path><g fill=\"#357ded\"><path d=\"M150.5,0h-64.5l21.5,21.5l-43,43l21.5,21.5l43,-43l21.5,21.5z\"></path></g></g><path d=\"\" fill=\"none\"></path><path d=\"\" fill=\"none\"></path></g></g></svg>\n  </span>`;\n\n    tagContainer.prepend(tagLink);\n    tagsSection.insertBefore(tagContainer, lastChild);\n    return tagsSection;\n    // Call tagAlert now that section is loaded and link added\n}\n\n/**\n * Checks for the add new tag div on conversations, opportunities and contact details pages.\n * @param {HTMLDivElement} newTagDiv - the Tags div in contact details left panel\n */\nexport async function checkAddNewTag(newTagDiv?: HTMLDivElement) {\n    if (!newTagDiv) {\n        colorConsole('new tag div not found, waiting for click', 'orange');\n        /** @type {HTMLElement} */\n        const addNewTagSection = await waitForElement({ selector: '.add-new' });\n\n        return tagAlert(addNewTagSection);\n    }\n    const addNewSection = document.querySelector('.add-new') as HTMLElement;\n    if (addNewSection) {\n        colorConsole('add new section found', 'orange');\n        return tagAlert(addNewSection);\n    } else {\n        colorConsole(\n            'add new section not found, waiting for click',\n            'orange',\n            newTagDiv\n        );\n        newTagDiv.addEventListener('click', async (e) => {\n            const addNew = document.querySelector('.add-new');\n            if (!addNew) {\n                colorConsole(\n                    `click occurred on tag div, but add new not present`,\n                    'red'\n                );\n                return;\n            }\n            colorConsole(\n                `click occured on tag div, addNew found`,\n                'green',\n                addNew\n            );\n            const addNewTagDiv = await waitForElement({ selector: '.add-new' });\n            colorConsole(`add new section loaded -> `, 'green', addNewTagDiv);\n            tagAlert(addNewTagDiv);\n        });\n    }\n}\n\n/**\n * Attaches click listener for adding new tags\n * @param {HTMLElement} addNew\n */\nexport function tagAlert(addNew: HTMLElement) {\n    appended.tagsAdded = [];\n    colorConsole(`now attaching tag alert...`);\n\n    if (addNew.hasAttribute('listener'))\n        return colorConsole('tag alert found, returning...');\n    addNew.setAttribute('listener', 'tagAlert');\n\n    addNew.addEventListener(\n        'click',\n        function ta(e) {\n            addNew.removeAttribute('listener');\n            tagAddClick(e);\n        },\n        {\n            capture: true,\n            once: true,\n        }\n    );\n}\n\n/**\n * @param {Event} e\n */\nasync function tagAddClick(e: Event) {\n    colorConsole(`add new tag click captured`, 'green', e);\n    e.stopPropagation();\n    const target = e.target as HTMLElement;\n    const tagText = target.innerText?.trim();\n    // const confirm =  confirmTagAdd(e.target.textContent);\n    const dialog = new Dialog({\n        dialogClass: 'tag-confirm-dialog',\n        accept: 'Yes',\n        cancel: 'No',\n        message: `Are you sure you want to add <span class=\"tag-add\">${tagText}</span> as a new tag?</div>`,\n        target: target,\n    });\n    dialog.open({\n        dialogClass: 'tag-confirm-dialog',\n        accept: 'Yes',\n        cancel: 'No',\n        message: `Are you sure you want to add <span class=\"tag-add\">${tagText}</span> as a new tag?</div>`,\n        target: target,\n    });\n    const confirm = await dialog.waitForUser();\n    colorConsole(\n        `tag add confirmation: ${confirm} for tag ${tagText}`,\n        'green'\n    );\n    if (confirm) {\n        appended.tagsAdded.push(tagText);\n        target.click();\n    }\n    setTimeout(checkAddNewTag, 100);\n}\n", "import { CONTACT_DIVS_SELECTOR, ACTIONS_DIVS_SELECTOR } from './constants';\nimport { appended } from './index';\nimport { colorConsole } from './utils';\nimport { waitForManyElements } from './wait-elements';\n\n/**\n * Opens all the contact divs on the page\n * - Adds the div to the sectionTriggers array so we can open and close it later\n * - Adds the data-open attribute to the div so we know it is open\n * - adds an event listener to keep track of the open state\n */\nexport async function processContactDivs() {\n    const contactDivs = (await waitForManyElements(\n        CONTACT_DIVS_SELECTOR,\n        3\n    )) as NodeListOf<HTMLElement>;\n    const actionsSectionDivs = (await waitForManyElements(\n        ACTIONS_DIVS_SELECTOR,\n        3\n    )) as NodeListOf<HTMLElement>;\n    // path of d attribute when closed is d=\"M9 5l7 7-7 7\"\n    const CLOSED_PATH = 'M9 5l7 7-7 7';\n    // if the svg within the contactDivs or the actionsSection is not visible, then we need to open the div to see the contact info\n    for (let contactDiv of contactDivs) {\n        const contactDivTrigger = contactDiv.querySelector(\n            '.cursor-pointer'\n        ) as HTMLElement;\n        // path of d attibute when closed is d=\"M9 5l7 7-7 7\"\n        const path = contactDiv.querySelector('svg > path') as SVGPathElement;\n        if (!path) continue;\n        // add the div to the sectionTriggers array so we can open and close it later\n        appended.contactDivTriggers.push(contactDivTrigger);\n\n        if (path.getAttribute('d') === CLOSED_PATH) {\n            colorConsole('opening contact div', 'green', contactDiv);\n            (contactDiv.firstChild as HTMLElement).click();\n            contactDiv.setAttribute('data-open', 'true');\n        } else {\n            contactDiv.setAttribute('data-open', 'true');\n        }\n        // listen for clicks to keep track of the open state\n        contactDivTrigger.addEventListener('click', (e) => {\n            if (contactDiv.getAttribute('data-open') === 'true') {\n                contactDiv.setAttribute('data-open', 'false');\n            } else {\n                contactDiv.setAttribute('data-open', 'true');\n            }\n        });\n    }\n    for (let action of actionsSectionDivs) {\n        if (!action.childElementCount) {\n            continue;\n        }\n        const actionTrigger = action.querySelector(\n            '.cursor-pointer'\n        ) as HTMLElement;\n\n        appended.contactDivTriggers.push(action);\n\n        // path of d attibute when closed is d=\"M9 5l7 7-7 7\"\n        // select the 2nd svg element because the first is the not the chevron in actions\n        const path = action.querySelectorAll('svg > path')[1] as SVGPathElement;\n        if (path.getAttribute('d') === CLOSED_PATH) {\n            colorConsole('opening actions div', 'green', action);\n            (action.firstChild as HTMLElement).click();\n            action.setAttribute('data-open', 'true');\n        } else {\n            action.setAttribute('data-open', 'true');\n        }\n\n        // listen for clicks to keep track of the open state\n        action.addEventListener('click', (e) => {\n            if (action.getAttribute('data-open') === 'true') {\n                action.setAttribute('data-open', 'false');\n            } else {\n                action.setAttribute('data-open', 'true');\n            }\n        });\n    }\n}\n", "import { addAddressButtons, addSectionToggle } from './append';\nimport { addTagElements, checkAddNewTag, appendTagLink } from './tag-alert';\nimport { colorConsole, getAddressDivs } from './utils';\nimport { processContactDivs } from './contact-divs';\nimport * as wait from './wait-elements';\nimport * as constants from './constants';\nimport { addContactSearchBox } from './search-box';\nimport { saveAlert } from './save-alert';\n\nstartProspectCueCustomizations();\n\nexport const appended: ProspectCue = {\n    addressDivs: {},\n    tagsAdded: [],\n    contactDivs: [],\n    contactDivTriggers: [],\n    searchBox: null,\n};\n\nexport async function runContactPageCustomizations() {\n    colorConsole('running contact page customizations', 'green');\n    await processContactDivs();\n    // await addContactSearchBox();\n    await addSectionToggle();\n    await addAddressButtons();\n    await addTagElements();\n    await saveAlert();\n}\n\nasync function startProspectCueCustomizations() {\n    colorConsole('Starting prospect cue customizations', 'green');\n\n    if (window.location.pathname.includes('/contacts/detail/')) {\n        await runContactPageCustomizations();\n    }\n    if (window.location.pathname.includes('conversations')) {\n        colorConsole(\n            'reloaded to conversations page, checking for add new tag',\n            'yellow'\n        );\n        await checkAddNewTag();\n    }\n    if (window.location.pathname.includes('/opportunities/list')) {\n        colorConsole(\n            'reloaded to opportunities list page, checking for add new tag',\n            'yellow'\n        );\n        await checkAddNewTag();\n    }\n    function isAnchorElement(\n        target: EventTarget | null\n    ): target is HTMLAnchorElement {\n        return target instanceof HTMLAnchorElement;\n    }\n    window.addEventListener(\n        'click',\n        function watchWindowClicks(e: Event) {\n            if (!isAnchorElement(e.target)) {\n                return;\n            }\n            colorConsole(\n                `click was on an anchor element: ${e.target.href}`,\n                'yellow'\n            );\n            // set the current url at the time of the click\n            const currentPath = window.location.pathname;\n            setTimeout(async () => {\n                const target = e.target as HTMLAnchorElement;\n                // Contact Details Page\n                if (target.href.includes('/contacts/detail/')) {\n                    await runContactPageCustomizations();\n                    colorConsole(\n                        `click on contact page, checking for add new tag`,\n                        'yellow'\n                    );\n                } else if (\n                    !currentPath.includes('/contacts/detail/') &&\n                    window.location.pathname.includes('/contacts/detail/')\n                ) {\n                    // Contact Details Page - click on a within the page.\n                    colorConsole(\n                        `click on contact page, checking for add new tag`,\n                        'yellow'\n                    );\n                    await runContactPageCustomizations();\n                } else if (\n                    window.location.pathname.includes(\n                        '/conversations/conversations'\n                    )\n                ) {\n                    await checkAddNewTag();\n                } else if (\n                    currentPath.includes('/opportunities/list') &&\n                    window.location.pathname.includes('/opportunities/list')\n                ) {\n                    await checkAddNewTag();\n                }\n            }, 500);\n        },\n        true\n    );\n}\n\nexport {\n    wait,\n    addTagElements,\n    appendTagLink,\n    checkAddNewTag,\n    colorConsole,\n    startProspectCueCustomizations,\n    getAddressDivs,\n    addAddressButtons,\n    processContactDivs,\n    constants,\n    addContactSearchBox,\n};\n", "import { appended } from './index';\n\n/**\n * cycles through the labels on the page and finds the address fields\n */\nexport function getAddressDivs(labels: NodeList) {\n    // Find the Street Address label, then find the containing Div, then use its siblings to find the other address fields.\n    let addressDivChildren;\n    for (let label of labels) {\n        if (\n            label.textContent &&\n            label.textContent.trim() === 'Street Address'\n        ) {\n            /** @type {HTMLElement} */\n            addressDivChildren = (label as HTMLElement).closest(\n                '.pt-3 > div'\n            )?.children;\n            if (!addressDivChildren) {\n                colorConsole('could not find addressDivChildren', 'red');\n                return;\n            }\n\n            const addressDivs: AddressDivs = {\n                streetLabel: label as HTMLElement,\n                streetDiv: addressDivChildren[1] as HTMLElement,\n                cityDiv: addressDivChildren[2] as HTMLElement,\n                stateDiv: addressDivChildren[4] as HTMLElement,\n                zipDiv: addressDivChildren[5] as HTMLElement,\n                addressDivChildren: addressDivChildren,\n            };\n\n            appended.addressDivs = addressDivs;\n            return addressDivs;\n        }\n    }\n}\n\nexport function colorConsole(\n    logString: string,\n    color?: 'red' | 'green' | 'blue' | 'yellow' | 'orange',\n    object?: object\n) {\n    const colorMap = {\n        red: '#f1889a',\n        green: '#6DECB9',\n        blue: '#88FFF7',\n        yellow: '#FFF6BF',\n        orange: '#f19684',\n    };\n\n    color ??= 'blue';\n\n    console.log(\n        `%c \uD83E\uDE90 ${logString}`,\n        `font-size: 13px; color: ${colorMap[color]} `,\n        object\n    );\n}\n", "import { colorConsole } from './utils';\n\ntype WaitForElementProps = {\n    selector?: string;\n    element?: HTMLElement;\n    logMessage?: string;\n};\n\nconst isSelector = (\n    props: WaitForElementProps\n): props is { selector: string } => props.selector !== undefined;\n\nexport function waitForElement(props: WaitForElementProps) {\n    props.logMessage && colorConsole(props.logMessage);\n    return new Promise((resolve: (value: HTMLElement) => void) => {\n        const element = isSelector(props)\n            ? (document.querySelector(props.selector) as HTMLElement)\n            : props.element;\n        if (element) {\n            resolve(element);\n        }\n\n        const observer = new MutationObserver((mutations) => {\n            const element = isSelector(props)\n                ? (document.querySelector(props.selector) as HTMLElement)\n                : props.element;\n            if (element) {\n                resolve(element);\n                observer.disconnect();\n            }\n        });\n\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true,\n        });\n    });\n}\n\n/**\n * Waits for a specified number of elements to be present in the DOM\n * * To wait for children, use the selector 'parent > *'\n * @param {string} selectorAll - the CSS Selector for the parent node\n * @param {number} numElements - the number of elements to wait for\n * @param {string} textContent - the textContent of the parent node\n * @returns {Promise<NodeList | Element>} - the NodeList of the parent's children\n */\nexport function waitForManyElements(\n    selectorAll: string,\n    numElements = 1,\n    textContent?: string\n) {\n    colorConsole(\n        `waiting for ${numElements} children on ${selectorAll} ${\n            textContent ? `with textContent ${textContent}` : ''\n        }`\n    );\n    return new Promise((resolve: (value: NodeList) => void) => {\n        const elements = document.querySelectorAll(selectorAll);\n        if (elements.length >= numElements) {\n            colorConsole(\n                `${selectorAll} already has at least ${numElements} nodes...`,\n                'green',\n                elements\n            );\n            resolve(elements);\n        }\n\n        const pObserver = new MutationObserver((mutations) => {\n            const elements = document.querySelectorAll(selectorAll);\n            if (elements.length >= numElements) {\n                colorConsole(\n                    `${selectorAll} now has at least ${numElements} nodes...`,\n                    'green',\n                    elements\n                );\n                resolve(elements);\n                pObserver.disconnect();\n            }\n        });\n\n        pObserver.observe(document.body, {\n            childList: true,\n            subtree: true,\n        });\n    });\n}\n\n/**\n * Searches a NodeList and waits for specified textContent before resolving\n * @param {string} selectorAll - the CSS Selector for the parent node\n * @param {string} textContent - the textContent of the parent node\n * @returns {Promise<NodeList | Element>} - the NodeList of the parent's children\n *  */\nexport function waitForTextContent(selectorAll: string, textContent: string) {\n    return new Promise((resolve: (value: HTMLElement) => void) => {\n        const elements = document.querySelectorAll(\n            selectorAll\n        ) as NodeListOf<HTMLElement>;\n        for (let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            if (element.textContent === textContent) {\n                colorConsole(\n                    `found textContent immediately: ${textContent}...`,\n                    'green',\n                    element\n                );\n                resolve(element);\n            }\n        }\n\n        const observer = new MutationObserver((mutations) => {\n            const elements = document.querySelectorAll(\n                selectorAll\n            ) as NodeListOf<HTMLElement>;\n            for (let i = 0; i < elements.length; i++) {\n                const element = elements[i];\n                if (element.textContent === textContent) {\n                    colorConsole(\n                        `found textContent: ${textContent}...`,\n                        'green',\n                        element\n                    );\n                    resolve(element);\n                    observer.disconnect();\n                }\n            }\n        });\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true,\n        });\n    });\n}\n", "import Dialog from './dialog';\nimport { waitForElement } from './wait-elements';\n\nexport async function saveAlert() {\n    const formFooter = await waitForElement({ selector: '.form-footer.save' });\n    const changes = document.querySelector(\n        '.form-footer.save > div'\n    )?.textContent;\n    const numChanges = Number(changes?.match(/^\\d+/)?.[0]);\n    const saveButton = document.querySelector(\n        '.form-footer.save > div > button ~ div > button'\n    );\n    const notSaveButton = document.querySelectorAll(\n        'a[href], a.back'\n    ) as NodeListOf<HTMLAnchorElement>;\n    notSaveButton.forEach((ahref: HTMLAnchorElement) => {\n        ahref.addEventListener(\n            'click',\n            async (e: MouseEvent) => {\n                console.log('trying to exit without saving');\n                if (numChanges > 0) {\n                    const dialog = new Dialog({\n                        message: `You have ${numChanges} unsaved changes. Are you sure you want to discard them?`,\n                        accept: 'Discard',\n                        cancel: 'Cancel',\n                        soundAccept:\n                            'https://freesound.org/data/previews/48/48701_4483-lq.mp3',\n                        soundOpen:\n                            'https://freesound.org/data/previews/48/48701_4483-lq.mp3',\n                    });\n                    const result = await dialog.alert(\n                        `You have ${numChanges} unsaved changes. Are you sure you want to discard them?`\n                    );\n                    if (typeof result === 'boolean' && result) {\n                        dialog.toggle();\n                    }\n                }\n            },\n            { once: true }\n        );\n    });\n}\n"],
  "mappings": "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",
  "names": ["template", "element", "elements"]
}
