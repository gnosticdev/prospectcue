{
  "version": 3,
  "sources": ["../src/typescript/wait-promise.ts"],
  "sourcesContent": ["function waitForElement(selector: string, elementName?: string) {\n    elementName && colorConsole(elementName + '...waiting for ' + selector)\n    return new Promise(function (resolve, reject) {\n        const element = document.querySelector(selector)\n        if (element) {\n            colorConsole(\n                elementName + '...already present -> ' + selector,\n                'green',\n                element\n            )\n            resolve(element)\n            return\n        }\n        const observer = new MutationObserver(function (records) {\n            records.forEach(function (mutation) {\n                const nodes = Array.from(mutation.addedNodes)\n                colorConsole('mutation nodes', 'yellow', nodes)\n                nodes.forEach(function (node) {\n                    if (observer && node instanceof HTMLElement) {\n                        colorConsole('node is an HTMLElement', 'yellow', node)\n                        const innerElement = node.querySelector(selector)\n                        if (node.matches(selector) || innerElement) {\n                            colorConsole(\n                                elementName + '...found -> ' + selector + ' in',\n                                'green',\n                                node\n                            )\n                            observer.disconnect()\n                            resolve(\n                                node.matches(selector) ? node : innerElement\n                            )\n                        }\n                    }\n                })\n            })\n\n            setTimeout(function () {\n                colorConsole(\n                    elementName +\n                        '...' +\n                        selector +\n                        ' not found after 4 seconds...',\n                    'orange'\n                )\n                observer.disconnect()\n                reject(\n                    new Error(elementName + ' was not found after 4 seconds')\n                )\n            }, 4000)\n        })\n\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true,\n        })\n    })\n}\n\nfunction colorConsole(\n    logString: string,\n    color?: 'red' | 'green' | 'blue' | 'yellow' | 'orange',\n    object?: object\n) {\n    const colorMap = {\n        red: '#f1889a',\n        green: '#6DECB9',\n        blue: '#88FFF7',\n        yellow: '#FFF6BF',\n        orange: '#f19684',\n    }\n\n    color = color || 'blue'\n\n    console.log(\n        '%c \uD83E\uDE90 ' + logString,\n        'font-size: 13px; color: ' + colorMap[color] + ' ',\n        object\n    )\n}\n\nexport { waitForElement, colorConsole }\n"],
  "mappings": ";;;AAAA,WAAS,eAAe,UAAkB,aAAsB;AAC5D,mBAAe,aAAa,cAAc,oBAAoB,QAAQ;AACtE,WAAO,IAAI,QAAQ,SAAU,SAAS,QAAQ;AAC1C,YAAM,UAAU,SAAS,cAAc,QAAQ;AAC/C,UAAI,SAAS;AACT;AAAA,UACI,cAAc,2BAA2B;AAAA,UACzC;AAAA,UACA;AAAA,QACJ;AACA,gBAAQ,OAAO;AACf;AAAA,MACJ;AACA,YAAM,WAAW,IAAI,iBAAiB,SAAU,SAAS;AACrD,gBAAQ,QAAQ,SAAU,UAAU;AAChC,gBAAM,QAAQ,MAAM,KAAK,SAAS,UAAU;AAC5C,uBAAa,kBAAkB,UAAU,KAAK;AAC9C,gBAAM,QAAQ,SAAU,MAAM;AAC1B,gBAAI,YAAY,gBAAgB,aAAa;AACzC,2BAAa,0BAA0B,UAAU,IAAI;AACrD,oBAAM,eAAe,KAAK,cAAc,QAAQ;AAChD,kBAAI,KAAK,QAAQ,QAAQ,KAAK,cAAc;AACxC;AAAA,kBACI,cAAc,iBAAiB,WAAW;AAAA,kBAC1C;AAAA,kBACA;AAAA,gBACJ;AACA,yBAAS,WAAW;AACpB;AAAA,kBACI,KAAK,QAAQ,QAAQ,IAAI,OAAO;AAAA,gBACpC;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAED,mBAAW,WAAY;AACnB;AAAA,YACI,cACI,QACA,WACA;AAAA,YACJ;AAAA,UACJ;AACA,mBAAS,WAAW;AACpB;AAAA,YACI,IAAI,MAAM,cAAc,gCAAgC;AAAA,UAC5D;AAAA,QACJ,GAAG,GAAI;AAAA,MACX,CAAC;AAED,eAAS,QAAQ,SAAS,MAAM;AAAA,QAC5B,WAAW;AAAA,QACX,SAAS;AAAA,MACb,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAEA,WAAS,aACL,WACA,OACA,QACF;AACE,UAAM,WAAW;AAAA,MACb,KAAK;AAAA,MACL,OAAO;AAAA,MACP,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,IACZ;AAEA,YAAQ,SAAS;AAEjB,YAAQ;AAAA,MACJ,kBAAW;AAAA,MACX,6BAA6B,SAAS,KAAK,IAAI;AAAA,MAC/C;AAAA,IACJ;AAAA,EACJ;",
  "names": []
}
