{
  "version": 3,
  "sources": ["../src/cloudflare/purge.ts"],
  "sourceRoot": "dist,",
  "sourcesContent": ["export interface Env {\n    CLOUDFLARE_API_KEY: string;\n    CLOUDFLARE_EMAIL: string;\n    CLOUDFLARE_BASE_URL: string;\n}\n\nconst handler: ExportedHandler = {\n    async fetch(\n        req: Request,\n        env: unknown,\n        ctx: ExecutionContext\n    ): Promise<Response> {\n        const { CLOUDFLARE_API_KEY, CLOUDFLARE_BASE_URL, CLOUDFLARE_EMAIL } =\n            env as Env;\n        async function getZones() {\n            const apikey = CLOUDFLARE_API_KEY;\n            const email = CLOUDFLARE_EMAIL;\n            if (!apikey || !email) {\n                throw new Error('No API key or email found');\n            }\n            const options = {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Auth-Key': CLOUDFLARE_API_KEY,\n                    'X-Auth-Email': CLOUDFLARE_EMAIL,\n                },\n            };\n            const response = await fetch(\n                CLOUDFLARE_BASE_URL + '/zones',\n                options\n            );\n            const json: ZoneResponse = await response.json();\n            return json;\n        }\n\n        async function getZoneByName(name: string) {\n            const zones = await getZones();\n            const zone = zones.result.find((z) => z.name === name);\n            return zone;\n        }\n\n        async function purgeCache() {\n            const zoneId = (await getZoneByName('prospectcue.com'))?.id;\n            if (!zoneId) {\n                throw new Error('No zone id found');\n            }\n\n            const options = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Auth-Email': CLOUDFLARE_EMAIL,\n                    'X-Auth-Key': CLOUDFLARE_API_KEY,\n                },\n                body: JSON.stringify({\n                    purge_everything: true,\n                }),\n            };\n\n            return await fetch(\n                `https://api.cloudflare.com/client/v4/zones/${zoneId}/purge_cache`,\n                options\n            );\n        }\n\n        const response = await purgeCache();\n        return new Response(response.statusText, {\n            status: response.status,\n        });\n    },\n};\n\nexport default handler;\n"],
  "mappings": ";AAMA,IAAM,UAA2B;AAAA,EAC7B,MAAM,MACF,KACA,KACA,KACiB;AACjB,UAAM,EAAE,oBAAoB,qBAAqB,iBAAiB,IAC9D;AACJ,mBAAe,WAAW;AACtB,YAAM,SAAS;AACf,YAAM,QAAQ;AACd,UAAI,CAAC,UAAU,CAAC,OAAO;AACnB,cAAM,IAAI,MAAM,2BAA2B;AAAA,MAC/C;AACA,YAAM,UAAU;AAAA,QACZ,QAAQ;AAAA,QACR,SAAS;AAAA,UACL,gBAAgB;AAAA,UAChB,cAAc;AAAA,UACd,gBAAgB;AAAA,QACpB;AAAA,MACJ;AACA,YAAMA,YAAW,MAAM;AAAA,QACnB,sBAAsB;AAAA,QACtB;AAAA,MACJ;AACA,YAAM,OAAqB,MAAMA,UAAS,KAAK;AAC/C,aAAO;AAAA,IACX;AAEA,mBAAe,cAAc,MAAc;AACvC,YAAM,QAAQ,MAAM,SAAS;AAC7B,YAAM,OAAO,MAAM,OAAO,KAAK,CAAC,MAAM,EAAE,SAAS,IAAI;AACrD,aAAO;AAAA,IACX;AAEA,mBAAe,aAAa;AACxB,YAAM,UAAU,MAAM,cAAc,iBAAiB,IAAI;AACzD,UAAI,CAAC,QAAQ;AACT,cAAM,IAAI,MAAM,kBAAkB;AAAA,MACtC;AAEA,YAAM,UAAU;AAAA,QACZ,QAAQ;AAAA,QACR,SAAS;AAAA,UACL,gBAAgB;AAAA,UAChB,gBAAgB;AAAA,UAChB,cAAc;AAAA,QAClB;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACjB,kBAAkB;AAAA,QACtB,CAAC;AAAA,MACL;AAEA,aAAO,MAAM;AAAA,QACT,8CAA8C;AAAA,QAC9C;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,WAAW,MAAM,WAAW;AAClC,WAAO,IAAI,SAAS,SAAS,YAAY;AAAA,MACrC,QAAQ,SAAS;AAAA,IACrB,CAAC;AAAA,EACL;AACJ;AAEA,IAAO,gBAAQ;",
  "names": ["response"]
}
