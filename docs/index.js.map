{
  "version": 3,
  "sources": ["../src/typescript/index.ts", "../src/typescript/utils.ts", "../src/typescript/wait-elements.ts", "../src/typescript/add-buttons.ts", "../src/typescript/dialog.ts", "../src/typescript/tag-alert.ts"],
  "sourcesContent": ["import { startAddButtons } from './add-buttons';\nimport { addTagElements, checkAddNewTag } from './tag-alert';\nimport { colorConsole } from './utils';\nimport * as wait from './wait-elements';\nimport * as utils from './utils';\n\ncolorConsole('Starting prospectcue customizations', 'green');\nstartProspectCueCustomizations();\n\nasync function startProspectCueCustomizations() {\n    colorConsole('Starting prospect cue customizations', 'green');\n\n    if (window.location.pathname.includes('/contacts/detail/')) {\n        window.prospectCue = {\n            addressDivs: {},\n            tagsAdded: [],\n            contactLabels: [],\n            searchBox: null,\n        };\n        colorConsole(\n            'reloaded to contacts detail page, starting to add zillow/google buttons',\n            'yellow'\n        );\n        await startAddButtons();\n        await addTagElements();\n    }\n    if (window.location.pathname.includes('conversations')) {\n        colorConsole(\n            'reloaded to conversations page, checking for add new tag',\n            'yellow'\n        );\n        await checkAddNewTag();\n    }\n    if (window.location.pathname.includes('/opportunities/list')) {\n        colorConsole(\n            'reloaded to opportunities list page, checking for add new tag',\n            'yellow'\n        );\n        await checkAddNewTag();\n    }\n    window.addEventListener(\n        'click',\n        function watchWindowClicks(e: MouseEvent) {\n            const currentUrl = window.location.pathname;\n\n            setTimeout(async () => {\n                colorConsole(\n                    `current URL -> pathname 500ms later... = ${currentUrl} -> ${window.location.pathname}`,\n                    'yellow'\n                );\n                const target = e.target as HTMLAnchorElement;\n                if (target.href && target.href.includes('/contacts/detail/')) {\n                    await startAddButtons();\n                    await addTagElements();\n                } else if (\n                    !currentUrl.includes('/contacts/detail/') &&\n                    window.location.pathname.includes('/contacts/detail/')\n                ) {\n                    await startAddButtons();\n                    await addTagElements();\n                } else if (\n                    window.location.pathname.includes(\n                        '/conversations/conversations'\n                    )\n                ) {\n                    await checkAddNewTag();\n                } else if (\n                    currentUrl.includes('/opportunities/list') &&\n                    window.location.pathname.includes('/opportunities/list')\n                ) {\n                    await checkAddNewTag();\n                }\n            }, 500);\n        },\n        true\n    );\n}\n\nexport {\n    wait,\n    addTagElements,\n    checkAddNewTag,\n    startAddButtons,\n    colorConsole,\n    startProspectCueCustomizations,\n    utils,\n};\n", "import { waitForManyElements } from './wait-elements';\n\n/**\n * cycles through the labels on the page and finds the address fields\n */\nexport function getAddressDivs(labels: NodeList) {\n    if (!window.prospectCue) {\n        window.prospectCue = {\n            addressDivs: {},\n            tagsAdded: [],\n            contactLabels: [],\n            searchBox: null,\n        };\n    }\n    // Find the Street Address label, then find the containing Div, then use its siblings to find the other address fields.\n    let addressDivChildren;\n    for (let label of labels) {\n        if (\n            label.textContent &&\n            label.textContent.trim() === 'Street Address'\n        ) {\n            /** @type {HTMLElement} */\n            addressDivChildren = (label as HTMLElement).closest(\n                '.pt-3 > div'\n            )?.children;\n            if (!addressDivChildren) {\n                colorConsole('could not find addressDivChildren', 'red');\n                return;\n            }\n\n            const addressDivs: AddressDivs = {\n                streetLabel: label as HTMLElement,\n                streetDiv: addressDivChildren[1] as HTMLElement,\n                cityDiv: addressDivChildren[2] as HTMLElement,\n                stateDiv: addressDivChildren[4] as HTMLElement,\n                zipDiv: addressDivChildren[5] as HTMLElement,\n                addressDivChildren: addressDivChildren,\n            };\n\n            window.prospectCue.addressDivs = addressDivs;\n            return addressDivs;\n        }\n    }\n}\n\nexport const sectionTriggers = [] as HTMLElement[];\n\nexport async function openAllContactDivs() {\n    const contactDivsSelector =\n        '.hl_contact-details-left > div > .h-full.overflow-y-auto > .py-3.px-3';\n    const actionsSectionSelector =\n        '.hl_contact-details-left > div > .h-full.overflow-y-auto > .bg-gray-100 > .py-3.px-3';\n    const contactDivs = (await waitForManyElements(\n        contactDivsSelector,\n        3\n    )) as NodeListOf<HTMLElement>;\n    const actionsSectionDivs = (await waitForManyElements(\n        actionsSectionSelector,\n        3\n    )) as NodeListOf<HTMLElement>;\n    // if the svg within the contactDivs or the actionsSection is not visible, then we need to open the div to see the contact info\n    for (let contactDiv of contactDivs) {\n        // path of d attibute when closed is d=\"M9 5l7 7-7 7\"\n        const path = contactDiv.querySelector('svg > path') as SVGPathElement;\n        if (!path) continue;\n        // add the div to the sectionTriggers array so we can open and close it later\n        sectionTriggers.push(contactDiv);\n\n        if (path.getAttribute('d') === 'M9 5l7 7-7 7') {\n            colorConsole('opening contact div', 'green', contactDiv);\n            (contactDiv.firstChild as HTMLElement).click();\n            // wait 1 second for the div to open\n        }\n    }\n    for (let action of actionsSectionDivs) {\n        if (!action.childElementCount) {\n            continue;\n        }\n\n        sectionTriggers.push(action);\n\n        // path of d attibute when closed is d=\"M9 5l7 7-7 7\"\n        // select the 2nd svg element because the first is the not the chevron in actions\n        const path = action.querySelectorAll('svg > path')[1] as SVGPathElement;\n        if (path.getAttribute('d') === 'M9 5l7 7-7 7') {\n            colorConsole('opening actions div', 'green', action);\n            (action.firstChild as HTMLElement).click();\n            // wait 1 second for the div to open\n        }\n    }\n}\n\nexport function toggleSectionTriggers() {\n    for (let trigger of sectionTriggers) {\n        (trigger.firstChild as HTMLElement).click();\n    }\n}\n\nexport function colorConsole(\n    logString: string,\n    color?: 'red' | 'green' | 'blue' | 'yellow' | 'orange',\n    object?: object\n) {\n    const colorMap = {\n        red: '#f1889a',\n        green: '#6DECB9',\n        blue: '#88FFF7',\n        yellow: '#FFF6BF',\n        orange: '#f19684',\n    };\n\n    color ??= 'blue';\n\n    console.log(\n        `%c \uD83E\uDE90 ${logString}`,\n        `font-size: 13px; color: ${colorMap[color]} `,\n        object\n    );\n}\n", "import { colorConsole } from './utils';\n\ntype WaitForElementProps = {\n    selector?: string;\n    element?: HTMLElement;\n};\n\nconst isSelector = (\n    props: WaitForElementProps\n): props is { selector: string } => props.selector !== undefined;\n\nexport function waitForElement(props: WaitForElementProps) {\n    return new Promise((resolve: (value: HTMLElement) => void) => {\n        const element = isSelector(props)\n            ? (document.querySelector(props.selector) as HTMLElement)\n            : props.element;\n        if (element) {\n            resolve(element);\n        }\n\n        const observer = new MutationObserver((mutations) => {\n            const element = isSelector(props)\n                ? (document.querySelector(props.selector) as HTMLElement)\n                : props.element;\n            if (element) {\n                resolve(element);\n                observer.disconnect();\n            }\n        });\n\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true,\n        });\n    });\n}\n\n/**\n * Waits for a specified number of elements to be present in the DOM\n * * To wait for children, use the selector 'parent > *'\n * @param {string} selectorAll - the CSS Selector for the parent node\n * @param {number} numElements - the number of elements to wait for\n * @param {string} textContent - the textContent of the parent node\n * @returns {Promise<NodeList | Element>} - the NodeList of the parent's children\n */\nexport function waitForManyElements(\n    selectorAll: string,\n    numElements = 1,\n    textContent?: string\n) {\n    colorConsole(\n        `waiting for ${numElements} children on ${selectorAll} ${\n            textContent ? `with textContent ${textContent}` : ''\n        }`\n    );\n    return new Promise((resolve: (value: NodeList) => void) => {\n        const elements = document.querySelectorAll(selectorAll);\n        if (elements.length >= numElements) {\n            colorConsole(\n                `${selectorAll} already has at least ${numElements} nodes...`,\n                'green',\n                elements\n            );\n            resolve(elements);\n        }\n\n        const pObserver = new MutationObserver((mutations) => {\n            const elements = document.querySelectorAll(selectorAll);\n            if (elements.length >= numElements) {\n                colorConsole(\n                    `${selectorAll} now has at least ${numElements} nodes...`,\n                    'green',\n                    elements\n                );\n                resolve(elements);\n                pObserver.disconnect();\n            }\n        });\n\n        pObserver.observe(document.body, {\n            childList: true,\n            subtree: true,\n        });\n    });\n}\n\n/**\n * Searches a NodeList and waits for specified textContent before resolving\n * @param {string} selectorAll - the CSS Selector for the parent node\n * @param {string} textContent - the textContent of the parent node\n * @returns {Promise<NodeList | Element>} - the NodeList of the parent's children\n *  */\nexport function waitForTextContent(selectorAll: string, textContent: string) {\n    return new Promise((resolve: (value: HTMLElement) => void) => {\n        const elements = document.querySelectorAll(\n            selectorAll\n        ) as NodeListOf<HTMLElement>;\n        for (let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            if (element.textContent === textContent) {\n                colorConsole(\n                    `found textContent immediately: ${textContent}...`,\n                    'green',\n                    element\n                );\n                resolve(element);\n            }\n        }\n\n        const observer = new MutationObserver((mutations) => {\n            const elements = document.querySelectorAll(\n                selectorAll\n            ) as NodeListOf<HTMLElement>;\n            for (let i = 0; i < elements.length; i++) {\n                const element = elements[i];\n                if (element.textContent === textContent) {\n                    colorConsole(\n                        `found textContent: ${textContent}...`,\n                        'green',\n                        element\n                    );\n                    resolve(element);\n                    observer.disconnect();\n                }\n            }\n        });\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true,\n        });\n    });\n}\n", "import { getAddressDivs, colorConsole, openAllContactDivs } from './utils';\nimport { waitForManyElements } from './wait-elements';\n\nexport async function startAddButtons() {\n    // open all of the contact divs\n    await openAllContactDivs();\n    // Check if map buttons already present\n    const labels = await waitForManyElements(\n        '.hl_contact-details-left .form-group .label',\n        40\n    );\n    const addressDivs = getAddressDivs(labels);\n    if (!addressDivs) {\n        colorConsole(\n            'no address divs found, returning from startAddButtons',\n            'red'\n        );\n        return;\n    }\n    colorConsole('address divs found... inserting map buttons', 'green');\n    await insertMapButtons(addressDivs);\n}\n\n/**\n * Inserts the map buttons\n * @param {{streetLabel: HTMLElement, streetDiv: HTMLElement, cityDiv: HTMLElement, stateDiv: HTMLElement, zipDiv: HTMLElement}} addressDivs\n */\nexport async function insertMapButtons(addressDivs: AddressDivs) {\n    // const prospectTab = $('#prospect > div:nth-child(2)');\n    if (document.querySelectorAll('.zg-map-btns').length > 0) {\n        colorConsole('map buttons already present, returning', 'yellow');\n        return;\n    }\n    const newDiv = document.createElement('div');\n    newDiv.id = 'mapLinks';\n    newDiv.className = 'mapContainerZG';\n    newDiv.style.display = 'inline-flex';\n    const { streetLabel } = addressDivs;\n    streetLabel.style.display = 'inline-flex';\n    streetLabel.style.width = '50%';\n\n    const addressParams: { [key: string]: string | null } = {\n        street: addressDivs.streetDiv.querySelector('input')?.value ?? null,\n        city: addressDivs.cityDiv.querySelector('input')?.value ?? null,\n        state: addressDivs.stateDiv.querySelector('input')?.value ?? null,\n        zip: addressDivs.stateDiv.querySelector('input')?.value ?? null,\n    };\n\n    // create string of address params separatted by a '-', also for each value if it has a space, only add if not null\n    const zillowParams = encodeURIComponent(\n        Object.values(addressParams)\n            .filter((val) => val !== null)\n            .join(' ')\n    );\n\n    const googleParams = Object.values(addressParams)\n        .filter((val) => val !== null)\n        .map((val) => encodeURIComponent(val as string))\n        .join('+');\n\n    const googleButton = `<span class=\"zillowTitle\">Search:</span><a href=\"https://www.google.com/search?q=${googleParams}\" target=\"_blank\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\" class=\"zg-map-btns\"></a>`;\n    const zillowButton = `<a href=\"https://www.zillow.com/homes/for_sale/${zillowParams}_rb\" target=\"_blank\" id=\"zillowLink\"><img src=\"https://www.zillow.com/apple-touch-icon.png\" class=\"zg-map-btns\"></a>`;\n    newDiv.innerHTML = googleButton + zillowButton;\n\n    streetLabel.insertAdjacentElement('afterend', newDiv);\n}\n", "// @ts-nocheck\n/**\n * Dialog module.\n * @module dialog.js\n * @version 1.0.0\n * @summary 02-01-2022\n * @author Mads Stoumann\n * @description Custom versions of `alert`, `confirm` and `prompt`, using `<dialog>`\n */\nexport default class Dialog {\n    settings: DialogSettings;\n    dialogSupported?: boolean;\n    dialog?: HTMLDialogElement;\n    elements?: { [key: string]: HTMLElement };\n    focusable?: never[];\n    hasFormData?: boolean;\n\n    constructor(settings = {}) {\n        this.settings = Object.assign(\n            {\n                accept: 'OK',\n                bodyClass: 'dialog-open',\n                cancel: 'Cancel',\n                dialogClass: '',\n                message: '',\n                soundAccept: '',\n                soundOpen: '',\n                template: '',\n            },\n            settings\n        );\n        this.init();\n    }\n\n    collectFormData(formData: FormData) {\n        const object: { [key: string]: string | string[] } = {};\n        formData.forEach((value, key) => {\n            if (typeof value === 'string') {\n                if (object.hasOwnProperty(key)) {\n                    if (!Array.isArray(object[key])) {\n                        object[key] = [object[key] as string];\n                    }\n                    (object[key] as string[]).push(value);\n                } else {\n                    object[key] = value;\n                }\n            }\n        });\n    }\n\n    getFocusable() {\n        return [\n            ...this.dialog?.querySelectorAll(\n                'button,[href],select,textarea,input:not([type=\"hidden\"]),[tabindex]:not([tabindex=\"-1\"])'\n            ),\n        ];\n    }\n\n    init() {\n        this.dialogSupported = typeof HTMLDialogElement === 'function';\n        this.dialog = document.createElement('dialog');\n        this.dialog.role = 'dialog';\n        this.dialog.dataset.component = this.dialogSupported\n            ? 'dialog'\n            : 'no-dialog';\n        this.dialog.innerHTML = `\n    <form method=\"dialog\" data-ref=\"form\">\n      <fieldset data-ref=\"fieldset\" role=\"document\">\n        <legend data-ref=\"message\" id=\"${Math.round(Date.now()).toString(\n            36\n        )}\"></legend>\n        <div data-ref=\"template\"></div>\n      </fieldset>\n      <menu>\n        <button${\n            this.dialogSupported ? '' : ` type=\"button\"`\n        } data-ref=\"cancel\" value=\"cancel\"></button>\n        <button${\n            this.dialogSupported ? '' : ` type=\"button\"`\n        } data-ref=\"accept\" value=\"default\"></button>\n      </menu>\n      <audio data-ref=\"soundAccept\"></audio>\n      <audio data-ref=\"soundOpen\"></audio>\n    </form>`;\n        document.body.appendChild(this.dialog);\n\n        this.elements = {};\n        this.focusable = [];\n        this.dialog\n            .querySelectorAll('[data-ref]')\n            .forEach((el: HTMLElement) => (this.elements[el.dataset.ref] = el));\n        this.dialog.setAttribute('aria-labelledby', this.elements.message.id);\n        this.elements.cancel.addEventListener('click', () => {\n            this.dialog.dispatchEvent(new Event('cancel'));\n        });\n        this.dialog.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter') {\n                if (!this.dialogSupported) e.preventDefault();\n                this.elements.accept.dispatchEvent(new Event('click'));\n            }\n            if (e.key === 'Escape')\n                this.dialog.dispatchEvent(new Event('cancel'));\n            if (e.key === 'Tab') {\n                e.preventDefault();\n                const len = this.focusable.length - 1;\n                let index = this.focusable.indexOf(e.target);\n                index = e.shiftKey ? index - 1 : index + 1;\n                if (index < 0) index = len;\n                if (index > len) index = 0;\n                this.focusable[index].focus();\n            }\n        });\n        this.toggle();\n    }\n\n    open(settings = {}) {\n        const dialog = Object.assign({}, this.settings, settings);\n        this.dialog.className = dialog.dialogClass || '';\n        this.elements.accept.innerText = dialog.accept;\n        this.elements.cancel.innerText = dialog.cancel;\n        this.elements.cancel.hidden = dialog.cancel === '';\n        this.elements.message.innerHTML = dialog.message;\n        this.elements.soundAccept.src = dialog.soundAccept || '';\n        this.elements.soundOpen.src = dialog.soundOpen || '';\n        this.elements.target = dialog.target || '';\n        this.elements.template.innerHTML = dialog.template || '';\n\n        this.focusable = this.getFocusable();\n        this.hasFormData = this.elements.fieldset.elements.length > 0;\n\n        if (dialog.soundOpen) {\n            this.elements.soundOpen.play();\n        }\n\n        this.toggle(true);\n\n        if (this.hasFormData) {\n            this.focusable[0].focus();\n            this.focusable[0].select();\n        } else {\n            this.elements.accept.focus();\n        }\n    }\n\n    toggle(open = false) {\n        if (this.dialogSupported && open) this.dialog.showModal();\n        if (!this.dialogSupported) {\n            document.body.classList.toggle(this.settings.bodyClass, open);\n        }\n        this.dialog.hidden = !open;\n        if (this.elements.target && !open) {\n            this.elements.target.focus();\n        }\n    }\n\n    waitForUser() {\n        return new Promise((resolve) => {\n            this.dialog.addEventListener(\n                'cancel',\n                () => {\n                    this.toggle();\n                    resolve(false);\n                },\n                { once: true }\n            );\n            this.elements.accept.addEventListener(\n                'click',\n                () => {\n                    let value = this.hasFormData\n                        ? this.collectFormData(new FormData(this.elements.form))\n                        : true;\n                    if (\n                        this.elements.soundAccept.getAttribute('src').length > 0\n                    )\n                        this.elements.soundAccept.play();\n                    this.toggle();\n                    resolve(value);\n                },\n                { once: true }\n            );\n        });\n    }\n\n    alert(message, config = { target: e.target }) {\n        const settings = Object.assign({}, config, {\n            cancel: '',\n            message,\n            template: '',\n        });\n        this.open(settings);\n        return this.waitForUser();\n    }\n\n    confirm(message, config = { target: e.target }) {\n        const settings = Object.assign({}, config, { message, template: '' });\n        this.open(settings);\n        return this.waitForUser();\n    }\n\n    prompt(message, value, config = { target: e.target }) {\n        const template = `<label aria-label=\"${message}\"><input type=\"text\" name=\"prompt\" value=\"${value}\"></label>`;\n        const settings = Object.assign({}, config, { message, template });\n        this.open(settings);\n        return this.waitForUser();\n    }\n}\n", "import Dialog from './dialog';\nimport { colorConsole } from './utils';\nimport { waitForElement, waitForManyElements } from './wait-elements';\n\nexport async function addTagElements() {\n    colorConsole(`inserting tag link and tag alert...`, 'blue');\n    if (!window.prospectCue) {\n        window.prospectCue = {\n            addressDivs: {},\n            tagsAdded: [],\n            contactLabels: [],\n            searchBox: null,\n        };\n    }\n    window.prospectCue.tagsAdded = [];\n    const actionsSection = (await waitForManyElements(\n        '.hl_contact-details-left .h-full .bg-gray-100 > div',\n        3\n    )) as NodeListOf<HTMLElement>;\n    /** @type {HTMLElement} */\n    let tagDiv: HTMLDivElement | null = null;\n    for (let i = 0; i < actionsSection.length; i++) {\n        const node = actionsSection[i];\n        if (node.textContent && node.textContent.trim() === 'Tags') {\n            tagDiv = node as HTMLDivElement;\n            colorConsole(`original tagDiv found -> `, 'orange', tagDiv);\n            break;\n        }\n    }\n\n    if (tagDiv === null) {\n        colorConsole('tag div not found', 'red');\n        return;\n    }\n\n    // If the edit tag div is already present, don't add it again\n    if (tagDiv.querySelector('.tags-edit-container')) {\n        return;\n    }\n    const newTagDiv = await insertTagLink(tagDiv);\n    if (!newTagDiv) {\n        colorConsole('new tag div not found', 'red');\n        return;\n    }\n    colorConsole(`new tag div found -> `, 'green', newTagDiv);\n    checkAddNewTag(newTagDiv);\n}\n\n/**\n * Inserts an \"Edit Tags\" link next to Tags section in Contact Details.\n * @param {HTMLDivElement} tagDiv - the Tags section on contact info screen\n */\nexport async function insertTagLink(tagDiv: HTMLDivElement) {\n    // If the edit tag div is already present, don't add it again\n    if (tagDiv.querySelector('tags-edit')) return null;\n\n    // Create the tagsAdded array on window object\n    const nodeAfter = tagDiv.lastElementChild;\n\n    // Need container to hold the link so the link doesnt grow with flex-grow\n    const tagContainer = document.createElement('div');\n    tagContainer.classList.add('tags-edit-container');\n\n    const tagLink = document.createElement('a');\n    const currentUrl = window.location.href;\n    tagLink.href = currentUrl.replace(/contacts.*/, 'settings/tags');\n    tagLink.target = '_blank';\n    tagLink.innerHTML = `<span class=\"tags-edit\">Edit Tags  <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n  width=\"12\" height=\"12\"\n  viewBox=\"0 0 172 172\"\n  style=\" fill:#000000;\"><g transform=\"\"><g fill=\"none\" fill-rule=\"nonzero\" stroke=\"none\" stroke-width=\"1\" stroke-linecap=\"butt\" stroke-linejoin=\"miter\" stroke-miterlimit=\"10\" stroke-dasharray=\"\" stroke-dashoffset=\"0\" font-family=\"none\" font-weight=\"none\" font-size=\"none\" text-anchor=\"none\" style=\"mix-blend-mode: normal\"><path d=\"M0,172v-172h172v172z\" fill=\"none\"></path><path d=\"\" fill=\"none\"></path><path d=\"\" fill=\"none\"></path><path d=\"\" fill=\"none\"></path><path d=\"\" fill=\"none\"></path><path d=\"\" fill=\"none\"></path><path d=\"\" fill=\"none\"></path><g><path d=\"M5.375,26.875h118.25v118.25h-118.25z\" fill=\"#c2e8ff\"></path><path d=\"M118.25,32.25v107.5h-107.5v-107.5h107.5M129,21.5h-129v129h129v-129z\" fill=\"#357ded\"></path><path d=\"M129,43v32.25h-21.5l0,-32.25z\" fill=\"#c2e8ff\"></path><path d=\"M118.25,21.5v21.5h-32.25v-21.5z\" fill=\"#c2e8ff\"></path><g fill=\"#357ded\"><path d=\"M150.5,0h-64.5l21.5,21.5l-43,43l21.5,21.5l43,-43l21.5,21.5z\"></path></g></g><path d=\"\" fill=\"none\"></path><path d=\"\" fill=\"none\"></path></g></g></svg>\n  </span>`;\n\n    tagContainer.prepend(tagLink.toString(), { html: true });\n    tagDiv.insertBefore(tagContainer, nodeAfter);\n    return tagDiv;\n    // Call tagAlert now that section is loaded and link added\n}\n\n/**\n * Checks for the add new tag div on conversations, opportunities and contact details pages.\n * @param {HTMLDivElement} newTagDiv - the Tags div in contact details left panel\n */\nexport async function checkAddNewTag(newTagDiv?: HTMLDivElement) {\n    if (!newTagDiv) {\n        colorConsole('new tag div not found, waiting for click', 'orange');\n        /** @type {HTMLElement} */\n        const addNewWait = await waitForElement({ selector: '.add-new' });\n\n        return tagAlert(addNewWait);\n    }\n    const addNewSection = document.querySelector('.add-new') as HTMLElement;\n    if (addNewSection) {\n        colorConsole('add new section found', 'orange');\n        return tagAlert(addNewSection);\n    } else {\n        colorConsole(\n            'add new section not found, waiting for click',\n            'orange',\n            newTagDiv\n        );\n        newTagDiv.addEventListener('click', async (e) => {\n            const addNew = document.querySelector('.add-new');\n            if (!addNew) {\n                colorConsole(\n                    `click occurred on tag div, but add new not present`,\n                    'red'\n                );\n                return;\n            }\n            colorConsole(\n                `click occured on tag div, addNew found`,\n                'green',\n                addNew\n            );\n            const addNewWait = await waitForElement({ selector: '.add-new' });\n            colorConsole(`add new section loaded -> `, 'green', addNewWait);\n            tagAlert(addNewWait);\n        });\n    }\n}\n\n/**\n * Attaches click listener for adding new tags\n * @param {HTMLElement} addNew\n */\nexport function tagAlert(addNew: HTMLElement) {\n    if (!window.prospectCue) {\n        window.prospectCue = {\n            tagsAdded: [],\n            addressDivs: {},\n            contactLabels: [],\n            searchBox: null,\n        };\n    }\n\n    window.prospectCue.tagsAdded = [];\n\n    colorConsole(`now attaching tag alert...`);\n    if (addNew.hasAttribute('listener'))\n        return colorConsole('tag alert found, returning...');\n    addNew.setAttribute('listener', 'tagAlert');\n\n    addNew.addEventListener(\n        'click',\n        function ta(e) {\n            addNew.removeAttribute('listener');\n            tagAddClick(e);\n        },\n        {\n            capture: true,\n            once: true,\n        }\n    );\n}\n\n/**\n * @param {Event} e\n */\nasync function tagAddClick(e: Event) {\n    colorConsole(`add new tag click captured`, 'green', e);\n    e.stopPropagation();\n    const target = e.target as HTMLElement;\n    const tagText = target.innerText?.trim();\n    // const confirm =  confirmTagAdd(e.target.textContent);\n    const dialog = new Dialog();\n    dialog.open({\n        dialogClass: 'tag-confirm-dialog',\n        accept: 'Yes',\n        cancel: 'No',\n        message: `Are you sure you want to add <span class=\"tag-add\">${tagText}</span> as a new tag?</div>`,\n        target: target,\n    });\n    const confirm = await dialog.waitForUser();\n    colorConsole(\n        `tag add confirmation: ${confirm} for tag ${tagText}`,\n        'green'\n    );\n    if (confirm) {\n        window.prospectCue.tagsAdded.push(tagText);\n        target.click();\n    }\n    setTimeout(checkAddNewTag, 100);\n}\n"],
  "mappings": "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",
  "names": ["typescript_exports", "__export", "addTagElements", "checkAddNewTag", "colorConsole", "startAddButtons", "startProspectCueCustomizations", "utils_exports", "wait_elements_exports", "utils_exports", "__export", "colorConsole", "getAddressDivs", "openAllContactDivs", "sectionTriggers", "toggleSectionTriggers", "wait_elements_exports", "__export", "waitForElement", "waitForManyElements", "waitForTextContent", "isSelector", "props", "waitForElement", "resolve", "element", "observer", "mutations", "waitForManyElements", "selectorAll", "numElements", "textContent", "colorConsole", "elements", "pObserver", "waitForTextContent", "i", "getAddressDivs", "labels", "_a", "addressDivChildren", "label", "colorConsole", "addressDivs", "sectionTriggers", "openAllContactDivs", "__async", "contactDivsSelector", "actionsSectionSelector", "contactDivs", "waitForManyElements", "actionsSectionDivs", "contactDiv", "path", "action", "toggleSectionTriggers", "trigger", "logString", "color", "object", "colorMap", "startAddButtons", "__async", "openAllContactDivs", "labels", "waitForManyElements", "addressDivs", "getAddressDivs", "colorConsole", "insertMapButtons", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "newDiv", "streetLabel", "addressParams", "zillowParams", "val", "googleButton", "zillowButton", "Dialog", "settings", "__publicField", "formData", "object", "value", "key", "_a", "el", "e", "len", "index", "dialog", "open", "resolve", "message", "config", "template", "addTagElements", "__async", "colorConsole", "actionsSection", "waitForManyElements", "tagDiv", "node", "newTagDiv", "insertTagLink", "checkAddNewTag", "nodeAfter", "tagContainer", "tagLink", "currentUrl", "addNewWait", "waitForElement", "tagAlert", "addNewSection", "e", "addNew", "tagAddClick", "_a", "target", "tagText", "dialog", "Dialog", "confirm", "colorConsole", "startProspectCueCustomizations", "__async", "startAddButtons", "addTagElements", "checkAddNewTag", "e", "currentUrl", "target"]
}
